import streamlit as st
import streamlit_highcharts as hct
import pandas as pd
import numpy as np
import datetime
import os
from utils.chart_helpers import create_chart

st.set_page_config(
    page_title="Planejamento Financeiro | Persevera",
    page_icon="üíπ",
    layout="wide"
)

# Inclus√£o do CSS
assets_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'assets')
css_path = os.path.join(assets_dir, 'style.css')
with open(css_path) as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

st.title("Planejamento Financeiro")

# Defini√ß√£o dos par√¢metros
st.sidebar.header("Par√¢metros")

st.sidebar.subheader("Caracter√≠sticas Pessoais")
data_nascimento = st.sidebar.date_input("Data de Nascimento:", value=datetime.date(1980, 1, 1), min_value=datetime.date(1900, 1, 1), max_value=datetime.date.today(), format="DD/MM/YYYY")
# idade_atual = st.sidebar.number_input("Idade Atual:", min_value=18, max_value=100, value=35, step=1, format="%d")
idade_atual = st.sidebar.number_input("Idade Atual:", min_value=18, max_value=100, value=datetime.date.today().year - data_nascimento.year, step=1, format="%d", disabled=True)

# Escolha do m√©todo de defini√ß√£o
metodo_calculo = st.sidebar.radio(
    "M√©todo de Planejamento:",
    options=["Expectativa de Vida", "Per√≠odo de Distribui√ß√£o"],
    help="Escolha se quer definir sua expectativa de vida ou o per√≠odo de distribui√ß√£o dos recursos"
)

st.sidebar.subheader("Patrim√¥nio")
patrimonio_inicial = st.sidebar.number_input("Patrim√¥nio Inicial (R$):", min_value=0.0, value=100000.0, step=10000.0, format="%.0f")

st.sidebar.subheader("Fase de Acumula√ß√£o")
periodo_acumulacao = st.sidebar.number_input("Per√≠odo de Acumula√ß√£o (anos):", min_value=0.0, value=20.0, step=1.0, format="%.0f")

if periodo_acumulacao == 0:
    aporte_mensal = st.sidebar.number_input("Aporte Mensal (R$):", min_value=0.0, value=0.0, step=1000.0, format="%.0f", disabled=True)
else:
    aporte_mensal = st.sidebar.number_input("Aporte Mensal (R$):", min_value=0.0, value=5000.0, step=1000.0, format="%.0f")

st.sidebar.subheader("Fase de Distribui√ß√£o")

# L√≥gica condicional baseada na escolha do usu√°rio
if metodo_calculo == "Expectativa de Vida":
    expectativa_vida = st.sidebar.number_input("Expectativa de Vida:", min_value=int(idade_atual + periodo_acumulacao), max_value=120, value=85, step=1, format="%d")
    
    # Calcular per√≠odo de distribui√ß√£o automaticamente
    periodo_distribuicao_calculado = expectativa_vida - idade_atual - periodo_acumulacao
    
    if periodo_distribuicao_calculado <= 0:
        st.sidebar.error("‚ö†Ô∏è Per√≠odo de distribui√ß√£o resultaria em valor negativo ou zero. Ajuste a expectativa de vida ou per√≠odo de acumula√ß√£o.")
        periodo_distribuicao = 1.0  # Valor m√≠nimo para evitar erros
    else:
        periodo_distribuicao = periodo_distribuicao_calculado
    
    # Campo desabilitado mostrando o valor calculado
    st.sidebar.number_input(
        "Per√≠odo de Distribui√ß√£o (anos) - Calculado:",
        value=float(periodo_distribuicao),
        disabled=True,
        format="%.0f",
        help=f"Calculado como: {expectativa_vida} - {idade_atual} - {periodo_acumulacao:.0f} = {periodo_distribuicao:.0f} anos"
    )
    
else:  # "Definir Per√≠odo de Distribui√ß√£o"
    periodo_distribuicao = st.sidebar.number_input("Per√≠odo de Distribui√ß√£o (anos):", min_value=1.0, value=10.0, step=1.0, format="%.0f")
    
    # Calcular expectativa de vida automaticamente
    expectativa_vida = idade_atual + periodo_acumulacao + periodo_distribuicao
    
    # Campo desabilitado mostrando o valor calculado
    st.sidebar.number_input("Expectativa de Vida - Calculada:", value=int(expectativa_vida), disabled=True, format="%d", help=f"Calculada como: {idade_atual} + {periodo_acumulacao:.0f} + {periodo_distribuicao:.0f} = {expectativa_vida:.0f} anos")

resgate_mensal = st.sidebar.number_input("Resgate Mensal (R$):", min_value=0.0, value=10000.0, step=1000.0, format="%.0f")

# Valida√ß√£o da expectativa de vida (agora que a vari√°vel est√° definida)
if metodo_calculo == "Definir Expectativa de Vida" and expectativa_vida <= idade_atual:
    st.sidebar.error("A expectativa de vida deve ser maior que a idade atual!")

st.sidebar.subheader("Hip√≥teses de Mercado")
rentabilidade_nominal_esperada = st.sidebar.number_input("Rentabilidade Nominal Esperada (% a.a):", min_value=0.0, value=10.0, step=0.1, format="%.1f")
inflacao_esperada = st.sidebar.number_input("Infla√ß√£o Esperada (% a.a):", min_value=0.0, value=4.0, step=0.1, format="%.1f")
aliquota_irrf = st.sidebar.number_input("Al√≠quota de Impostos (%):", min_value=0.0, value=15.0, step=0.1, format="%.1f")

# Definindo as taxas anuais a partir dos inputs da sidebar (necess√°rio para c√°lculos posteriores)
rentabilidade_anual = rentabilidade_nominal_esperada / 100.0
inflacao_anual = inflacao_esperada / 100.0

# Informa√ß√µes contextuais baseadas na idade
anos_restantes = expectativa_vida - idade_atual
idade_fim_acumulacao = idade_atual + periodo_acumulacao
idade_inicio_distribuicao = idade_fim_acumulacao
idade_fim_distribuicao = idade_inicio_distribuicao + periodo_distribuicao

# Mostrar m√©todo de c√°lculo escolhido
st.info(f"**M√©todo Ativo:** {metodo_calculo} \n\n **Expectativa de Vida:** {expectativa_vida:.0f} anos \n\n **Per√≠odo de Distribui√ß√£o:** {periodo_distribuicao:.0f} anos")

info_cols = st.columns(3)

with info_cols[0]:
    st.info(f"**Idade Atual:** {idade_atual} anos\n\n**Anos Restantes:** {anos_restantes} anos")

with info_cols[1]:
    if periodo_acumulacao > 0:
        st.info(f"**Fase de Acumula√ß√£o:**\n\n{idade_atual} ‚Üí {idade_fim_acumulacao:.0f} anos")
    else:
        st.info(f"**Sem Fase de Acumula√ß√£o**\n\nIniciando distribui√ß√£o aos {idade_atual} anos")

with info_cols[2]:
    st.info(f"**Fase de Distribui√ß√£o:**\n\n{idade_inicio_distribuicao:.0f} ‚Üí {idade_fim_distribuicao:.0f} anos")

# Alertas se necess√°rio
if idade_fim_distribuicao > expectativa_vida:
    st.warning(f"‚ö†Ô∏è **Aten√ß√£o:** O per√≠odo de distribui√ß√£o se estende at√© os {idade_fim_distribuicao:.0f} anos, ultrapassando a expectativa de vida de {expectativa_vida} anos.")

if anos_restantes < (periodo_acumulacao + periodo_distribuicao):
    st.warning(f"‚ö†Ô∏è **Aten√ß√£o:** O per√≠odo total do planejamento ({periodo_acumulacao + periodo_distribuicao:.0f} anos) √© maior que os anos restantes de vida ({anos_restantes} anos).")

# Alertas espec√≠ficos por m√©todo
if metodo_calculo == "Definir Expectativa de Vida" and periodo_distribuicao <= 5:
    st.warning(f"‚ö†Ô∏è **Per√≠odo curto:** Com sua expectativa de vida de {expectativa_vida} anos, voc√™ ter√° apenas {periodo_distribuicao:.0f} anos para distribui√ß√£o. Considere reduzir o per√≠odo de acumula√ß√£o ou aumentar a expectativa de vida.")

if metodo_calculo == "Definir Per√≠odo de Distribui√ß√£o" and expectativa_vida > 100:
    st.info(f"üìä **Expectativa alta:** Sua expectativa de vida calculada √© de {expectativa_vida:.0f} anos. Se desejar um planejamento mais conservador, considere usar o m√©todo 'Definir Expectativa de Vida'.")

# Fun√ß√£o para simular a evolu√ß√£o patrimonial
def simular_patrimonio(patrimonio_inicial, periodo_acumulacao, periodo_distribuicao, resgate_mensal, aporte_mensal, inflacao_esperada, rentabilidade_nominal_esperada, aliquota_irrf):
    
    # Convertendo taxas anuais para mensais
    rentabilidade_mensal_bruta_taxa = (1 + rentabilidade_nominal_esperada / 100.0) ** (1/12) - 1
    inflacao_mensal_calc = (1 + inflacao_esperada / 100.0) ** (1/12) - 1
    
    # Inicializando vari√°veis para armazenar resultados
    patrimonio_atual_para_prox_mes = patrimonio_inicial # This will carry over the EOM patrimony to next SOM
    resgate_total = 0.0
    aporte_total = 0.0
    rendimento_total = 0.0
    
    # Adicionar o estado inicial (M√™s 0)
    resultados = [{
        "M√™s": 0,
        "Ano": 0,
        "Patrim√¥nio Inicial M√™s": patrimonio_inicial,
        "Rendimento Mensal": 0.0,
        "Aporte Mensal Ajustado": 0.0,
        "Resgate Mensal Ajustado": 0.0,
        "Patrim√¥nio Final M√™s": patrimonio_inicial,
        "Rendimento Acumulado": rendimento_total,
        "Resgate Acumulado": resgate_total,
        "Aporte Acumulado": aporte_total,
        "Fator Infla√ß√£o": 1.0,
        "Infla√ß√£o Acumulada": 0.0
    }]

    meses_acumulacao = int(periodo_acumulacao * 12)
    meses_distribuicao = int(periodo_distribuicao * 12)
    meses_totais_simulacao = meses_acumulacao + meses_distribuicao
    
    # Simula√ß√£o m√™s a m√™s
    for mes in range(1, meses_totais_simulacao + 1):
        patrimonio_inicial_mes_corrente = patrimonio_atual_para_prox_mes

        # Aplicar rendimento
        rendimento_bruto_mes = patrimonio_inicial_mes_corrente * rentabilidade_mensal_bruta_taxa
        rendimento_liquido_mes_corrente = rendimento_bruto_mes * (1 - aliquota_irrf / 100.0)
        rendimento_total += rendimento_liquido_mes_corrente
        
        fator_inflacao = (1 + inflacao_mensal_calc) ** (mes - 1)
        
        aporte_do_mes_base = 0.0
        resgate_do_mes_base = 0.0

        if mes <= meses_acumulacao:
            # Fase de Acumula√ß√£o
            aporte_do_mes_base = aporte_mensal
        else:
            # Fase de Distribui√ß√£o (ocorre ap√≥s os meses de acumula√ß√£o)
            resgate_do_mes_base = resgate_mensal
        
        # Aplicar resgate ajustado pela infla√ß√£o
        resgate_ajustado_mes_corrente = resgate_do_mes_base * fator_inflacao
        resgate_total += resgate_ajustado_mes_corrente
        
        # Adicionar aportes (tamb√©m ajustados pela infla√ß√£o)
        aporte_ajustado_mes_corrente = aporte_do_mes_base * fator_inflacao
        aporte_total += aporte_ajustado_mes_corrente
        
        # Calcular novo patrim√¥nio (final do m√™s)
        patrimonio_final_mes_corrente = patrimonio_inicial_mes_corrente + rendimento_liquido_mes_corrente - resgate_ajustado_mes_corrente + aporte_ajustado_mes_corrente
        
        patrimonio_atual_para_prox_mes = patrimonio_final_mes_corrente # Atualizar para o in√≠cio do pr√≥ximo m√™s

        # Armazenar resultado para cada m√™s (depois agruparemos por ano)
        resultados.append({
            "M√™s": mes,
            "Ano": (mes - 1) // 12 + 1,
            "Patrim√¥nio Inicial M√™s": patrimonio_inicial_mes_corrente,
            "Rendimento Mensal": rendimento_liquido_mes_corrente,
            "Aporte Mensal Ajustado": aporte_ajustado_mes_corrente,
            "Resgate Mensal Ajustado": resgate_ajustado_mes_corrente,
            "Patrim√¥nio Final M√™s": patrimonio_final_mes_corrente,
            "Rendimento Acumulado": rendimento_total,
            "Resgate Acumulado": resgate_total,
            "Aporte Acumulado": aporte_total,
            "Fator Infla√ß√£o": fator_inflacao,
            "Infla√ß√£o Acumulada": (1 + inflacao_mensal_calc) ** (mes - 1) - 1
        })
    
    # Converter para DataFrame
    df_resultados = pd.DataFrame(resultados)
    
    # Adicionar coluna para per√≠odo formatado (para visualiza√ß√£o)
    df_resultados["Per√≠odo"] = df_resultados["Ano"].apply(lambda ano: "Inicial" if ano == 0 else f"Ano {ano}")
    df_resultados["Per√≠odo Completo"] = df_resultados.apply(
        lambda row: "Inicial" if row["M√™s"] == 0 else f"Ano {row['Ano']} M√™s {((row['M√™s'] - 1) % 12) + 1}",
        axis=1
    )
    
    return df_resultados

# Calcular a simula√ß√£o
df_simulacao = simular_patrimonio(
    patrimonio_inicial=patrimonio_inicial,
    periodo_acumulacao=periodo_acumulacao,
    periodo_distribuicao=periodo_distribuicao,
    resgate_mensal=resgate_mensal,
    aporte_mensal=aporte_mensal,
    inflacao_esperada=inflacao_esperada,
    rentabilidade_nominal_esperada=rentabilidade_nominal_esperada,
    aliquota_irrf=aliquota_irrf
)

st.subheader("Resultados da Simula√ß√£o")

ultima_linha = df_simulacao.iloc[-1]
patrimonio_final = ultima_linha["Patrim√¥nio Final M√™s"] # Atualizado
periodo_total_anos = periodo_acumulacao + periodo_distribuicao

if patrimonio_inicial > 0:
    crescimento_nominal = (patrimonio_final / patrimonio_inicial - 1) * 100
    inflacao_total_fator = (1 + inflacao_anual) ** periodo_total_anos
    if inflacao_total_fator > 0:
        crescimento_real = ((patrimonio_final / patrimonio_inicial) / inflacao_total_fator - 1) * 100
    else:
        crescimento_real = float('inf') if (patrimonio_final / patrimonio_inicial) >= 0 else float('-inf')
elif patrimonio_inicial == 0:
    if patrimonio_final > 0:
        crescimento_nominal = float('inf')
        crescimento_real = float('inf')
    elif patrimonio_final == 0:
        crescimento_nominal = 0.0
        crescimento_real = 0.0
    else:
        crescimento_nominal = float('-inf')
        crescimento_real = float('-inf')
else:
    crescimento_nominal = 0.0
    crescimento_real = 0.0

metricas_col1, metricas_col2 = st.columns(2)

with metricas_col1:
    st.metric("Patrim√¥nio Final", f"R$ {patrimonio_final:,.2f}", border=True)
    st.metric("Total Resgatado", f"R$ {ultima_linha['Resgate Acumulado']:,.2f}", border=True)
    st.metric("Crescimento Nominal", f"{crescimento_nominal:.2f}%", border=True)

with metricas_col2:
    st.metric("Rendimentos Acumulados", f"R$ {ultima_linha['Rendimento Acumulado']:,.2f}", border=True)
    st.metric("Total Aportado", f"R$ {ultima_linha['Aporte Acumulado']:,.2f}", border=True)
    st.metric("Crescimento Real", f"{crescimento_real:.2f}%", border=True)

# Evolu√ß√£o do Patrim√¥nio
st.subheader("Evolu√ß√£o do Patrim√¥nio")

evolucao_options = create_chart(
    data=df_simulacao,
    columns=["Patrim√¥nio Final M√™s", "Rendimento Acumulado", "Resgate Acumulado", "Aporte Acumulado"], # Adicionado Patrim√¥nio Inicial M√™s, Renomeado Patrim√¥nio
    names=["Patrim√¥nio", "Rendimento Acumulado", "Resgate Acumulado", "Aporte Acumulado"], # Adicionado Patrim√¥nio Inicial M√™s, Renomeado Patrim√¥nio
    chart_type='line',
    title="",
    y_axis_title="Valor (R$)",
    x_axis_title="Per√≠odo (meses)",
    x_column="Per√≠odo Completo",
)

hct.streamlit_highcharts(evolucao_options)

# An√°lise adicional
st.subheader("Contribui√ß√µes para o Patrim√¥nio")

categories_bar = ["Patrim√¥nio Inicial", "Rendimentos", "Aportes", "Resgates", "Patrim√¥nio Final"]
values_bar = [
    patrimonio_inicial, 
    ultima_linha["Rendimento Acumulado"], 
    ultima_linha["Aporte Acumulado"], 
    -ultima_linha["Resgate Acumulado"],
    patrimonio_final
]

df_bar_data = pd.DataFrame({
    'Categoria': categories_bar,
    'Valor': values_bar
})

barras_options = create_chart(
    data=df_bar_data,
    columns='Valor',
    names='Valores',
    chart_type='column',
    title="",
    y_axis_title="Valor (R$)",
    x_axis_title="",
    x_column='Categoria'
)
hct.streamlit_highcharts(barras_options, height=400)

# if barras_options:
#     # Manually adjust for colorByPoint and specific colors, and disable legend for this specific chart type
#     if 'plotOptions' not in barras_options:
#         barras_options['plotOptions'] = {}
#     if 'column' not in barras_options['plotOptions']:
#         barras_options['plotOptions']['column'] = {}
#     barras_options['plotOptions']['column']['colorByPoint'] = True
#     barras_options['colors'] = colors_bar
#     barras_options['legend'] = {'enabled': False} # Typically legend is not needed when colorByPoint is true for categories
#     barras_options['xAxis'] = {'type': 'category', 'title': {'text': None}}

#     hct.streamlit_highcharts(barras_options, height=400)


# Tabela detalhada
st.subheader("Mem√≥ria de C√°lculo")
tab_anual, tab_mensal = st.tabs(["Anual", "Mensal"])

with tab_anual:
    # Construir df_memoria_anual com Patrim√¥nio Inicial e Final do Ano
    anos = sorted(df_simulacao["Ano"].unique())
    memoria_anual_list = []
    for ano_val in anos:
        ano_data_first_month = df_simulacao[df_simulacao["Ano"] == ano_val].iloc[0]
        ano_data_last_month = df_simulacao[df_simulacao["Ano"] == ano_val].iloc[-1]
        
        memoria_anual_list.append({
            "Per√≠odo": ano_data_last_month["Per√≠odo"], # "Inicial" or "Ano X"
            "Patrim√¥nio Inicial Ano": ano_data_first_month["Patrim√¥nio Inicial M√™s"],
            "Patrim√¥nio Final Ano": ano_data_last_month["Patrim√¥nio Final M√™s"],
            "Rendimento Acumulado": ano_data_last_month["Rendimento Acumulado"],
            "Resgate Acumulado": ano_data_last_month["Resgate Acumulado"],
            "Aporte Acumulado": ano_data_last_month["Aporte Acumulado"],
            "Infla√ß√£o Acumulada": ano_data_last_month["Infla√ß√£o Acumulada"]
        })
    df_memoria_anual = pd.DataFrame(memoria_anual_list)

    df_memoria_anual["Patrim√¥nio Inicial Ano"] = df_memoria_anual["Patrim√¥nio Inicial Ano"].map("R$ {:,.2f}".format)
    df_memoria_anual["Patrim√¥nio Final Ano"] = df_memoria_anual["Patrim√¥nio Final Ano"].map("R$ {:,.2f}".format)
    df_memoria_anual["Rendimento Acumulado"] = df_memoria_anual["Rendimento Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_anual["Resgate Acumulado"] = df_memoria_anual["Resgate Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_anual["Aporte Acumulado"] = df_memoria_anual["Aporte Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_anual["Infla√ß√£o Acumulada"] = df_memoria_anual["Infla√ß√£o Acumulada"].map("{:.2%}".format)

    df_memoria_anual = df_memoria_anual[[
        "Per√≠odo", 
        "Patrim√¥nio Inicial Ano", 
        "Patrim√¥nio Final Ano", 
        "Rendimento Acumulado", 
        "Resgate Acumulado", 
        "Aporte Acumulado", 
        "Infla√ß√£o Acumulada"
    ]]
    df_memoria_anual.set_index("Per√≠odo", inplace=True)

    st.dataframe(df_memoria_anual, use_container_width=True)

with tab_mensal:
    df_memoria_mensal = df_simulacao.copy()
    df_memoria_mensal["Patrim√¥nio Inicial M√™s"] = df_memoria_mensal["Patrim√¥nio Inicial M√™s"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Rendimento Mensal"] = df_memoria_mensal["Rendimento Mensal"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Patrim√¥nio Final M√™s"] = df_memoria_mensal["Patrim√¥nio Final M√™s"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Rendimento Acumulado"] = df_memoria_mensal["Rendimento Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Resgate Acumulado"] = df_memoria_mensal["Resgate Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Resgate Mensal Ajustado"] = df_memoria_mensal["Resgate Mensal Ajustado"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Aporte Acumulado"] = df_memoria_mensal["Aporte Acumulado"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Aporte Mensal Ajustado"] = df_memoria_mensal["Aporte Mensal Ajustado"].map("R$ {:,.2f}".format)
    df_memoria_mensal["Infla√ß√£o Acumulada"] = df_memoria_mensal["Infla√ß√£o Acumulada"].map("{:.2%}".format)

    df_memoria_mensal = df_memoria_mensal[[
        "Per√≠odo Completo", 
        "Patrim√¥nio Inicial M√™s",
        "Rendimento Mensal",
        "Aporte Mensal Ajustado",
        "Resgate Mensal Ajustado",
        "Patrim√¥nio Final M√™s",
        "Rendimento Acumulado", 
        "Resgate Acumulado", 
        "Aporte Acumulado", 
        "Infla√ß√£o Acumulada"
    ]]
    df_memoria_mensal.set_index("Per√≠odo Completo", inplace=True)

    st.dataframe(df_memoria_mensal, use_container_width=True)
